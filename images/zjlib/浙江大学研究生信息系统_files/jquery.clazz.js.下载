(function() {
	var clazz_class = function() {
		var clazz = function() {
			this.initialize.apply(this, arguments);
		};

		var extended = {};
		var parent, superclass;
		for ( var index = 0, len = arguments.length; index < len; index++) {
			if (typeof arguments[index] == "function") {
				// 如果有父类
				if (index == 0 && len > 1) {
					var initialize = arguments[index].prototype.initialize;
					arguments[index].prototype.initialize = function() {
					};

					extended = new arguments[index]();
					if (initialize === undefined) {
						delete arguments[index].prototype.initialize;
					} else {
						arguments[index].prototype.initialize = initialize;
					}
					superclass = arguments[index];
					continue;
				}
				parent = arguments[index].prototype;
			} else {
				// top of class hiberarchy
				parent = arguments[index];
			}
			$.clazz.extending(extended, parent);
		}
		clazz.prototype = extended;
		clazz.superclass = superclass;
		return clazz;
	};
	clazz_class.extending = function(target, params) {
		target = target || {};
		for ( var prop in params) {
			target[prop] = params[prop];
		}
		return target;
	};
	$.extend({
		clazz : clazz_class
	});
})(jQuery);